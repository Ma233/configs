" =================================================================
" ==================== initialize with vim-plug ===================
" =================================================================

set nocompatible
filetype off

call plug#begin('~/.vim/plugged')
Plug 'NLKNguyen/papercolor-theme'
Plug 'lambdalisue/vim-pyenv'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'Ma233/Mark--Karkat'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dense-analysis/ale'
Plug 'chemzqm/wxapp.vim'
Plug 'cespare/vim-toml'
Plug 'rust-lang/rust.vim'
call plug#end()


" =================================================================
" ========================== basic config =========================
" =================================================================

syntax on
filetype plugin indent on

colorscheme ron
set background=dark
set history=2000                  " how many lines of history VIM has to remember
set autoread                      " auto reload when a file is changed from the outside
set shortmess=atI                 " make messages shorter. see (:help: shortmess)
set magic                         " turn magic on for regular expressions
set nobackup                      " do not keep a backup file
set noswapfile                    " do not keep a backup file
set timeoutlen=500                " time out on mapping after 0.5 seconds


" no annoying sound on errors
set novisualbell                  " turn off visual bell
set noerrorbells                  " don't beep
set visualbell t_vb=              " turn off error beep/flash


" location cursor style
set cursorcolumn
set cursorline


" movement
set scrolloff=7                   " keep 7 lines when scrolling


" show
set ruler                         " show the current row and column
set number                        " show line numbers
set showcmd                       " display incomplete commands
set matchtime=1                   " seconds to show the matching parenthesis


" search
set hlsearch                      " highlight searches
set incsearch                     " do incremental searching, search as you type
set ignorecase                    " ignore case when searching
set smartcase                     " no ignorecase if uppercase char present


" encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf-8
set ffs=unix,dos,mac              " use Unix as the standard file type
set formatoptions+=m              " Asia text adaptation
set formatoptions+=B              " Asia text adaptation


" complete
set completeopt=longest,menu
set wildmenu                      " show a navigable menu for tab completion
set wildmode=longest,list,full
set wildignore=*.o,*~,*.pyc


" status line
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set laststatus=2                  " always show the status line - use 2 lines for the status bar


" others
set backspace=indent,eol,start    " make backspace key act the way it should
set whichwrap+=<,>,h,l            " let backspace, h and l keys work across lines


" ======================= specific file type ======================

" instead tab with 4 spaces
set expandtab
set smarttab
set tabstop=4
set softtabstop=4

" enhanced indent configs
set autoindent smartindent
set shiftwidth=4                  " spaces for indent
set shiftround                    " count your spaces while indent by '<' or '>'

autocmd FileType ruby,php,coffee,javascript,typescript,html,htmldjango,xhtml,haml,sass,scss,css,yaml setlocal tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType nginx setlocal iskeyword-=:
autocmd FileType yaml setlocal nowrap

autocmd BufRead,BufNewFile *.conf set filetype=conf
autocmd BufRead,BufNewFile *.envrc set filetype=sh
autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby


" ========================== key mapping ==========================

" handle the long line situation
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" fix up command mode like a terminal
cmap <C-n> <t_kd>
cmap <C-p> <t_ku>
cmap <C-a> <Home>
cmap <C-e> <End>

" easy tab
nmap tn :tabnext<CR>
nmap tp :tabprevious<CR>
nmap to :tabnew<space>

" easy buffer
nmap <C-l> :bnext<CR>
nmap <C-h> :bprevious<CR>

" make Y behave like other capitals
nmap Y y$

" escape the line break
vnoremap $ $h

" switch ' `
nnoremap ' `
nnoremap ` '


" =================================================================
" ======================== personal config ========================
" =================================================================

" search selected text
vnoremap * y/\<<C-r>0\><CR>

" copy by gvim
vnoremap <C-c> "+y

" easier way to jump between window
nmap <C-w> <C-w>w

" simple mark by M
nnoremap M mb

" I don't need ex mode
nnoremap Q qq

" my leader key
let mapleader = ","
nmap S <leader>

" fix highlight with long text
nmap <F12> :syntax sync minlines=5000<CR>

" copy full file path to register
nmap <F11> :let @" = expand("%")<CR>

" save with sudo permission
cmap ww noautocmd w
cmap w!! w !sudo tee >/dev/null %


" =================================================================
" ======================== plugin customize =======================
" =================================================================

" papercolor-theme
colorscheme PaperColor

" ale
let g:ale_echo_msg_error_str = 'ERROR'
let g:ale_echo_msg_warning_str = 'WARN'
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'
nmap <C-j> <Plug>(ale_next_wrap)
nmap <C-k> <Plug>(ale_previous_wrap)
let g:ale_linters = {
\   'python': ['mypy', 'flake8'],
\   'javascript': ['eslint'],
\   'rust': ['analyzer'],
\   'go': ['gofmt', 'golint', 'govet'],
\}
let g:ale_fixers = {
\   '*':['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black'],
\   'json': ['prettier'],
\   'html': ['prettier'],
\   'wxml': ['prettier'],
\   'css': ['prettier'],
\   'wxss': ['prettier'],
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\   'go': ['gofmt', 'goimports'],
\}
let g:ale_fix_on_save = 1

" ack.vim
nmap <C-f> :Ack!<space>
vmap <C-f> y:Ack!<space><C-r>0
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" fzf.vim
let g:fzf_layout = { 'down': '~25%' }
nnoremap <C-o> :Files<space>
nnoremap <C-p> :Files<CR>
vmap <C-p> y<C-p><C-\>r0<C-a>

" Mark--Karkat
nmap - <leader>*
nmap = <leader>#


" =================================================================
" ============================ augroup ============================
" =================================================================

function! AutoSetFileHead()
    " .sh
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
        call append(1, "set -ex")
        normal Go
    endif
endfunc

augroup myag
    autocmd!

    " vim-pyenv
    autocmd VimEnter * PyenvActivate

    " auto set file head
    autocmd BufNewFile *.sh exec ":call AutoSetFileHead()"

    " return to last edit position when opening files
    " if this not work, make sure .viminfo is writable for you
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exec "normal g`\"" |
        \ endif

augroup END
