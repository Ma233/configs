" base
syntax on
colorscheme ron
set history=2000                " how many lines of history VIM has to remember
set nocompatible                " don't bother with vi compatibility
set autoread                    " auto reload when a file is changed from the outside
set shortmess=atI               " make messages shorter. see (:help: shortmess)
set magic                       " for regular expressions turn magic on
set nobackup                    " do not keep a backup file
set noswapfile                  " do not keep a backup file
set selection=inclusive


" DELETE ME ON SERVER
" load plugins
execute pathogen#infect()


" no annoying sound on errors
set novisualbell                " turn off visual bell
set noerrorbells                " don't beep
set visualbell t_vb=            " turn off error beep/flash
set tm=500


" location
set cursorcolumn
set cursorline


" movement
set scrolloff=7                 " keep 7 lines when scrolling


" show
set ruler                       " show the current row and column
set number                      " show line numbers
set showcmd                     " display incomplete commands
set showmatch                   " jump to matches when entering parentheses
set matchtime=1                 " seconds to show the matching parenthesis


" search
set hlsearch                    " highlight searches
set incsearch                   " do incremental searching, search as you type
set ignorecase                  " ignore case when searching
set smartcase                   " no ignorecase if Uppercase char present


" encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set termencoding=utf-8
set ffs=unix,dos,mac            " use Unix as the standard file type
set formatoptions+=m            " Asia text adaptation
set formatoptions+=B            " Asia text adaptation


" complete
set completeopt=longest,menu
set wildmenu                    " show a navigable menu for tab completion
set wildmode=longest,list,full
set wildignore=*.o,*~,*.pyc


" status line
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
set laststatus=2   " Always show the status line - use 2 lines for the status bar


" others
set backspace=indent,eol,start  " make backspace key act the way it should
set whichwrap+=<,>,h,l          " let backspace, h and l keys work across lines


" ======================= specific file type ======================

filetype on

" Enable filetype plugins
filetype plugin on
filetype indent on

" default tab
set expandtab                   " expand tabs to spaces
set smarttab
set tabstop=4
set softtabstop=4               " insert mode tab and backspace use 4 spaces

" default indent
set autoindent smartindent
set shiftwidth=4                " spaces for indent
set shiftround                  " count your spaces while indent by '<' or '>'

if has("autocmd")
    autocmd FileType ruby,php,coffee,javascript,typescript,html,htmldjango,xhtml,haml,sass,scss,css setlocal tabstop=2 shiftwidth=2 softtabstop=2
    autocmd FileType racket setlocal lisp
    autocmd FileType nginx setlocal iskeyword-=:

    autocmd BufRead,BufNewFile *.md,*.mkd,*.markdown set filetype=markdown.mkd
    autocmd BufRead,BufNewFile *.rkt,*.rktl set filetype=scheme
    autocmd BufRead,BufNewFile *.conf set filetype=conf
    autocmd BufRead,BufNewFile Vagrantfile set filetype=ruby

    autocmd BufNewFile *.sh,*.py,*.html exec ":call AutoSetFileHead()"
    function! AutoSetFileHead()
        " .sh
        if &filetype == 'sh'
            call setline(1, "\#!/bin/bash")
            call append(1, "set -ex")
            normal Go
        endif

        " html
        if &filetype == 'html'
            call setline(1, "<!DOCTYPE html>")
            call setline(2, "<html>")
            call setline(3, "  <head>")
            call setline(4, "    <meta charset=\"UTF-8\">")
            call setline(5, "    <title></title>")
            call setline(6, "  </head>")
            call setline(7, "  <body>")
            call setline(8, "  </body>")
            call setline(9, "</html>")
            normal 5Gf>
        endif

    endfunc

    " run it
    autocmd FileType python nmap <buffer> <F2> :!python %<CR>
    autocmd FileType ruby nmap <buffer> <F2> :!ruby %<CR>
    autocmd FileType rust nmap <buffer> <F2> :!cargo run<CR>
endif


" ========================== key mapping ==========================

" handle the long line situation
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" fix up command mode like a terminal
cmap <C-n> <t_kd>
cmap <C-p> <t_ku>
cmap <C-a> <Home>
cmap <C-e> <End>

" easy tab
nmap tn :tabnext<CR>
nmap tp :tabprevious<CR>
nmap to :tabnew<space>

" make Y behave like other capitals
nmap Y y$

" escape the line break
vnoremap $ $h

" switch ' `
nnoremap ' `
nnoremap ` '

" =================================================================
" ======================== personal config ========================
" =================================================================

" return to last edit position when opening files
" if this not work, make sure .viminfo is writable for you
if has("autocmd")
  autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
endif

" search selected text
vnoremap * y/\<<C-r>0\><CR>

" copy by gvim
vnoremap <C-c> "+y

" jump by W
nmap W <C-w>w

" simple mark by M
nnoremap M mb

" I don't need ex mode
nnoremap Q qq

" my leader key
let mapleader = ","
nmap S <leader>


" =========================== funtions ============================

" fix highlight with long text
nmap <F12> :syntax sync minlines=5000<CR>

" save with sudo permission
cmap w!! w !sudo tee >/dev/null %


" DELETE THOSE ON SERVER
" =================================================================
" ============================ plugins ============================
" =================================================================

" vim-pyenv
autocmd VimEnter * PyenvActivate

" ale
let g:ale_echo_msg_error_str = 'ERROR'
let g:ale_echo_msg_warning_str = 'WARN'
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s'
nmap <C-j> <Plug>(ale_next_wrap)
nmap <C-k> <Plug>(ale_previous_wrap)
let g:ale_linters = {
\   'python': ['mypy', 'flake8'],
\   'javascript': ['eslint'],
\   'rust': ['rls'],
\}
let g:ale_fixers = {
\   '*':['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black'],
\   'rust': ['rustfmt']
\}
let g:ale_fix_on_save = 1
let g:ale_python_mypy_options='--ignore-missing-imports'

" ack.vim
nmap <C-f> :Ack!<space>
vmap <C-f> y:Ack!<space><C-r>0

" ctrlp.vim
let g:ctrlp_max_height = 15
nmap <C-o> :CtrlP<space>
vmap <C-p> y<C-p><C-\>r0<C-a>

" ctrlp.vim auto open
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | CtrlPCurFile | endif
" ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" vim-bundle-mako
autocmd FileType html nmap <buffer> <F11> :set filetype=mako<CR>

" Vim-Jinja2-Syntax
autocmd FileType html nmap <buffer> <F10> :set filetype=jinja<CR>

" vim-go
autocmd FileType go nmap <buffer> <F2> :GoRun<CR>

" vim-javascript
let g:javascript_enable_domhtmlcss = 1
let g:javascript_ignore_javaScriptdoc = 1

" rainbow_parentheses.vim
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces
map <buffer> <F1> :RainbowParenthesesToggle<CR>

" vim-jsx
autocmd FileType javascript nmap <buffer> <F11> :set filetype=javascript.jsx<CR>

" vim-ansible-yaml
autocmd FileType yaml nmap <buffer> <F11> :set filetype=ansible<CR>

" vim-fugitive
autocmd QuickFixCmdPost *grep* cwindow

" prolog.vim
autocmd BufRead,BufNewFile *.pl set filetype=prolog

" python-syntax
" vim-python-pep8-indent
autocmd FileType python nmap <F11> :Python2Syntax<CR>

" nginx.vim
autocmd BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &ft == '' | set filetype=nginx | endif
autocmd FileType conf nmap <buffer> <F11> :set filetype=nginx<CR>

" auto-pairs
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutFastWrap = '<C-e>'

" vim-closetag
let g:closetag_filenames = "*.html,*.xhtml"

" Mark--Karkat
nmap - <leader>*
nmap = <leader>#
" default color Yellow conflict with search mark
highlight def MarkWord3 ctermbg=White ctermfg=Black guibg=#FFDB72 guifg=Black

" icinga2-vim
autocmd FileType conf nmap <buffer> <F10> :set filetype=icinga2<CR>
autocmd BufRead,BufNewFile *icinga2.mako,*icinga.mako nmap <buffer> <F10> :set filetype=icinga2<CR>
autocmd BufRead,BufNewFile *icinga2.mako,*icinga.mako nmap <buffer> <F11> :set filetype=mako<CR>

" vim-markdown
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh']

" asyncrun.vim
" nmap <C-a> :AsyncRun<space>

" surround.vim
" vim-puppet
" thrift.vim
" vim-toml
" typescript-vim
" vim-elixir
" vim-endwise
" vim-sbt
" vim-solidity
" vim-helm
